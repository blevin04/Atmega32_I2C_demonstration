#include <avr/io.h>
#include <util/twi.h>

#define F_CPU 16000000UL
#define SCL_CLOCK  100000L

void I2C_Init(void) {
    TWSR = 0x00;  // Set prescaler to zero
    TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;  // Set bit rate
}

void I2C_Start(void) {
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);  // Send START condition
    while (!(TWCR & (1 << TWINT)));  // Wait for TWINT flag set
}

void I2C_Stop(void) {
    TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);  // Send STOP condition
}

void I2C_Write(uint8_t data) {
    TWDR = data;  // Load data into data register
    TWCR = (1 << TWEN) | (1 << TWINT);  // Start transmission
    while (!(TWCR & (1 << TWINT)));  // Wait for TWINT flag set
}

uint8_t I2C_Read_ACK(void) {
    TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);  // Enable ACK
    while (!(TWCR & (1 << TWINT)));  // Wait for TWINT flag set
    return TWDR;  // Return received data
}

uint8_t I2C_Read_NACK(void) {
    TWCR = (1 << TWEN) | (1 << TWINT);  // Disable ACK
    while (!(TWCR & (1 << TWINT)));  // Wait for TWINT flag set
    return TWDR;  // Return received data
}

int main(void) {
    uint8_t data;
    I2C_Init();
    
    I2C_Start();
    I2C_Write(0x20);  // SLA+W (Slave address + Write)
    I2C_Write(0x55);  // Data byte
    I2C_Stop();
    
    while (1) {
        // Main loop
    }
}
